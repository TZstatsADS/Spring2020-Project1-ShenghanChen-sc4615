library(topicmodels)
library(knitr)
library(kableExtra)
library(formattable)
library(widyr)
#load the processed lyrics data
processed_data = load('../output/processed_lyrics.RData')
summary(dt_lyrics)
dt_lyrics %>%
filter(year > 1950 ) %>%
group_by(year, genre) %>%
summarise(number_of_songs = n()) %>%
arrange(number_of_songs)%>%
ggplot() +
geom_bar(aes(x = year, y = number_of_songs, fill = genre), stat = "identity")  +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Released Songs") +
labs(x = "year", y = "Song Count")+
theme_light()
undesirable_words = c( "theres", "yeah", "baby", "alright", "wanna", "gonna", "chorus", "verse", "whoa", "gotta", "make",
"oh", "4", "ooh", "uurh","poompoom", "3121",  " ai ", " ca",    "la ", "hey", " na ", " da ", " uh ",
" tin ", "  ll", "transcription", "repeats","nigga","niggas","yeah")
# data cleaning
data("stop_words")
dt_lyrics_filtered = dt_lyrics %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
distinct() %>%
filter(nchar(word) > 3)
# words count
full_word_count = dt_lyrics_filtered %>%
group_by(song,year,genre) %>%
summarise(num_words = n()) %>%
arrange(desc(num_words))
ave_lyrics = group_by(full_word_count,genre)
ggplot(ave_lyrics, aes(x = genre, y = num_words, fill = genre),color="red") +
ylab("Word count") +
xlab("genre") +
labs(title="Word Count Distribution") +
geom_boxplot()+
ylim(0,500)
popularity= dt_lyrics %>%
filter(year > 1950 ) %>%
group_by(genre) %>%
summarise(number_of_songs = n()) %>%
arrange(desc(number_of_songs))%>%
top_n(5)
popularity
dt_lyrics_rock <- dt_lyrics_filtered %>%
filter(genre=="Rock")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Reds")))
dt_lyrics_pop <- dt_lyrics_filtered %>%
filter(genre=="Pop")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"PuRd")))
dt_lyrics_metal <- dt_lyrics_filtered %>%
filter(genre=="Metal")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Oranges")))
dt_lyrics_metal <- dt_lyrics_filtered %>%
filter(genre=="Hip-Hop")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Blues")))
dt_lyrics_metal <- dt_lyrics_filtered %>%
filter(genre=="Country")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Greens")))
popular_tfidf_words <- dt_lyrics %>%
unnest_tokens(stemmedwords, lyrics) %>%
distinct() %>%
filter(!stemmedwords %in% undesirable_words) %>%
filter(nchar(stemmedwords) > 3) %>%
count(genre, stemmedwords, sort = TRUE) %>%
ungroup() %>%
bind_tf_idf(stemmedwords, genre, n)
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme_lyrics() +
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
#theme_lyrics() +
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")+
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
library(ggplot2)
dt_lyrics_sentiment <- dt_lyrics_filtered %>%
inner_join(get_sentiments("nrc")) %>%
count(genre, index = id %/% 1000, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(dt_lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")
knitr::opts_chunk$set(echo = FALSE)
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme_lyrics() +
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
popular_tfidf_words <- dt_lyrics %>%
unnest_tokens(stemmedwords, lyrics) %>%
distinct() %>%
filter(!stemmedwords %in% undesirable_words) %>%
filter(nchar(stemmedwords) > 3) %>%
count(genre, stemmedwords, sort = TRUE) %>%
ungroup() %>%
bind_tf_idf(stemmedwords, genre, n)
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")+
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
popular_tfidf_words <- dt_lyrics %>%
unnest_tokens(stemmedwords, lyrics) %>%
distinct() %>%
filter(!stemmedwords %in% undesirable_words) %>%
filter(nchar(stemmedwords) > 3) %>%
count(genre, stemmedwords, sort = TRUE) %>%
ungroup() %>%
bind_tf_idf(stemmedwords, genre, n)
library(ggplot2)
dt_lyrics_sentiment <- dt_lyrics_filtered %>%
inner_join(get_sentiments("nrc")) %>%
count(genre, index = id %/% 1000, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(dt_lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")
library(ggplot2)
dt_lyrics_sentiment <- dt_lyrics_filtered %>%
inner_join(get_sentiments("nrc")) %>%
count(genre, index = id %/% 1000, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(dt_lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme_lyrics() +
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
#create the decade column
dt_lyrics <- dt_lyrics %>%
mutate(decade =
ifelse(dt_lyrics$year %in% 1960:1969, "1960s",
ifelse(dt_lyrics$year %in% 1970:1979, "1970s",
ifelse(dt_lyrics$year %in% 1980:1989, "1980s",
ifelse(dt_lyrics$year %in% 1990:1999, "1990s",
ifelse(dt_lyrics$year %in% 2000:2009, "2000s",
ifelse(dt_lyrics$year %in% 2010:2015, "2010s",
"NA")))))))
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme_lyrics() +
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
#theme_lyrics() +
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
library(ggplot2)
dt_lyrics_sentiment <- dt_lyrics_filtered %>%
inner_join(get_sentiments("nrc")) %>%
count(genre, index = id %/% 1000, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(dt_lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")+
theme_light()
library(ggplot2)
dt_lyrics_sentiment <- dt_lyrics_filtered %>%
inner_join(get_sentiments("nrc")) %>%
count(genre, index = id %/% 1000, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(dt_lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")
dt_lyrics %>%
filter(year > 1950 ) %>%
group_by(year, genre) %>%
summarise(number_of_songs = n()) %>%
arrange(number_of_songs)%>%
ggplot() +
geom_bar(aes(x = year, y = number_of_songs, fill = genre), stat = "identity")  +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Released Songs") +
labs(x = "year", y = "Song Count")
knitr::opts_chunk$set(echo = TRUE)
#load libraries
library(tidytext)
library(textdata)
library(dplyr)
library(stringr)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(wordcloud)
library(reshape2)
library(tidyverse)
library(shiny)
library(rvest)
library(tibble)
library(sentimentr)
library(gplots)
library(syuzhet)
library(factoextra)
library(beeswarm)
library(RANN)
library(topicmodels)
library(knitr)
library(kableExtra)
library(formattable)
library(widyr)
#load the processed lyrics data
processed_data = load('../output/processed_lyrics.RData')
summary(dt_lyrics)
dt_lyrics %>%
filter(year > 1950 ) %>%
group_by(year, genre) %>%
summarise(number_of_songs = n()) %>%
arrange(number_of_songs)%>%
ggplot() +
geom_bar(aes(x = year, y = number_of_songs, fill = genre), stat = "identity")  +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Released Songs") +
labs(x = "year", y = "Song Count")
# data cleaning
data("stop_words")
dt_lyrics_filtered = dt_lyrics %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
distinct() %>%
filter(nchar(word) > 3)
# words count
full_word_count = dt_lyrics_filtered %>%
group_by(song,year,genre) %>%
summarise(num_words = n()) %>%
arrange(desc(num_words))
ave_lyrics = group_by(full_word_count,genre)
ggplot(ave_lyrics, aes(x = genre, y = num_words, fill = genre),color="red") +
ylab("Word count") +
xlab("genre") +
labs(title="Word Count Distribution") +
geom_boxplot()+
ylim(0,500)
popularity= dt_lyrics %>%
filter(year > 1950 ) %>%
group_by(genre) %>%
summarise(number_of_songs = n()) %>%
arrange(desc(number_of_songs))%>%
top_n(5)
popularity
dt_lyrics_rock <- dt_lyrics_filtered %>%
filter(genre=="Rock")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Reds")))
dt_lyrics_pop <- dt_lyrics_filtered %>%
filter(genre=="Pop")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"PuRd")))
dt_lyrics_metal <- dt_lyrics_filtered %>%
filter(genre=="Metal")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Oranges")))
dt_lyrics_metal <- dt_lyrics_filtered %>%
filter(genre=="Hip-Hop")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Blues")))
dt_lyrics_metal <- dt_lyrics_filtered %>%
filter(genre=="Country")%>%
count(word, sort = TRUE) %>%
with(wordcloud(word, n, max.words = 50,min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,colors=brewer.pal(9,"Greens")))
undesirable_words = c( "theres", "yeah", "baby", "alright", "wanna", "gonna", "chorus", "verse", "whoa", "gotta", "make",
"oh", "4", "ooh", "uurh","poompoom", "3121",  " ai ", " ca",    "la ", "hey", " na ", " da ", " uh ",
" tin ", "  ll", "transcription", "repeats","nigga","niggas","yeah")
popular_tfidf_words <- dt_lyrics %>%
unnest_tokens(stemmedwords, lyrics) %>%
distinct() %>%
filter(!stemmedwords %in% undesirable_words) %>%
filter(nchar(stemmedwords) > 3) %>%
count(genre, stemmedwords, sort = TRUE) %>%
ungroup() %>%
bind_tf_idf(stemmedwords, genre, n)
top_popular_tfidf_words <- popular_tfidf_words %>%
arrange(desc(tf_idf)) %>%
mutate(stemmedwords = factor(stemmedwords, levels = rev(unique(stemmedwords)))) %>%
group_by(genre) %>%
slice(seq_len(5)) %>%
ungroup() %>%
arrange(genre, tf_idf) %>%
mutate(row = row_number())
top_popular_tfidf_words %>%
ggplot(aes(x = row, tf_idf,
fill = genre)) +
geom_col(show.legend = NULL) +
labs(x = NULL, y = "TF-IDF") +
ggtitle("Important Words through TF-IDF") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")+
facet_wrap(~genre, ncol = 3, scales = "free") +
scale_x_continuous(
breaks = top_popular_tfidf_words$row,
labels = top_popular_tfidf_words$stemmedwords) +
coord_flip()
library(ggplot2)
dt_lyrics_sentiment <- dt_lyrics_filtered %>%
inner_join(get_sentiments("nrc")) %>%
count(genre, index = id %/% 1000, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(dt_lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")
# data cleaning
data("stop_words")
dt_lyrics_filtered = dt_lyrics %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
distinct() %>%
filter(nchar(word) > 3)
View(dt_lyrics_sentiment)
View(dt_lyrics_filtered)
